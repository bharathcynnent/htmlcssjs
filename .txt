<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Events</title>
    <style>
        /* Custom button styling */
        .userEventButton {
            border: none;
            border-radius: 999px; /* Full circle */
            padding: 8px 16px; /* Adjust padding as needed */
            margin: 4px; /* Add some space between buttons */
            background-color: #800080; /* Purple background color */
            color: white;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            transition-duration: 0.4s;
            cursor: pointer;
        }

        /* Change button color on hover */
        .userEventButton:hover {
            background-color: #2e042e; /* Darker purple color */
        }

        /* Custom styling for arrows */
        .arrow {
            font-size: 24px; /* Larger font size */
            margin: 0 10px; /* Increased margin */
            color: #800080; /* Purple color */
            font-weight: bold; /* Make the arrow thicker */
        }
    </style>
</head>
<body>
    <h1>User Events</h1>
    <div id="userEventsContainer"></div>

    <script>
        // Fetch data from the API
        fetch('https://webanalyticals.onrender.com/GetUserData/157.50.25.158')
            .then(response => response.json())
            .then(data => {
                // Iterate over each object in the response array
                data.forEach(userData => {
                    // Iterate over each user event in the userEvents array
                    userData.userEvents.forEach(userEvent => {
                        // Construct HTML to display user events dynamically
                        const userEventsHtml = `
                            <div>
                                
                                    ${Object.entries(userEvent).map(([key, value]) => {
                                        // Exclude "date" and "totalCount" fields
                                        if (key !== 'date' && key !== 'totalCount') {
                                            if (typeof value === 'object' && value !== null) {
                                                return Object.entries(value).map(([subKey, subValue]) => `
                                                    <button class="userEventButton">${subKey}: ${subValue}</button>
                                                    <span class="arrow">â†’</span>
                                                `).join('');
                                            } else {
                                                return `<button class="userEventButton">${key}: ${value}</button>`;
                                            }
                                        }
                                    }).join('')}
                                
                            </div>
                        `;
                        // Append user events HTML to the container
                        document.getElementById('userEventsContainer').innerHTML += userEventsHtml;
                    });
                });
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    </script>
</body>
</html>
