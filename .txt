ts
  renderDonutChart() {
    // Fetch data from the API
    this.dataService.getAllData().subscribe(data => {
      // Calculate device counts and prepare data for the donut chart
      const donutData = data.reduce((accumulatedData, entry) => {
        const existingDevice = accumulatedData.find(item => item.name === entry.device);
        if (existingDevice) {
          existingDevice.y++;
        } else {
          accumulatedData.push({ name: entry.device, y: 1 });
        }
        return accumulatedData;
      }, []);
  
      // Calculate total count
      this.totalCount = donutData.reduce((total, item) => total + item.y, 0);
  
      // Render the donut chart
      Highcharts.chart('pieChartContainer', {
        chart: {
          type: 'pie'
        },
        title: {
          text: 'Active User by Device'
        },
        tooltip: {
          pointFormat: '{series.name}: <b>{point.y}</b>'
        },
        plotOptions: {
          pie: {
            innerSize: '80%',
            depth: 50
          }
        },
        series: [{
          type: 'pie',
          name: 'Count',
          data: donutData
        }]
      });
  
      // Display total count
      document.getElementById('total-count').innerText = 'Total Count: ' + this.totalCount;
    });
}



html 

<figure class="highcharts-figure">
  <div id="parent-container">
    <div id="pieChartContainer"></div>
    <div id="total-count" class="center-label"></div> 
  </div>
</figure>


css

@import url("https://netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css");

.highcharts-figure {
    margin: 0;
    border: 1px solid whitesmoke;
    box-shadow: 3px 3px 5px rgba(139, 139, 139, 0.5);
    
    
}

#parent-container {
    position: relative; /* Make sure the parent container is positioned */
}

#pieChartContainer {
    height: 350px;
    max-width: 1000px;
    margin: 0 auto;
    background-color: ghostwhite;
}

.center-label {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 18px;
    font-weight: bold;
    text-align: center;
    color: rgb(80, 80, 150);
}








(async () => {
    // Fetch data from the API
    const response = await fetch('https://webanalyticals.onrender.com/getAllData');
    const data = await response.json();

    // Calculate device counts
    const deviceCounts = data.reduce((counts, entry) => {
        counts[entry.device] = (counts[entry.device] || 0) + 1;
        return counts;
    }, {});

    // Prepare data for the donut chart
    const donutData = Object.entries(deviceCounts).map(([device, count]) => ({
        name: device,
        y: count,
        
    }));

    // Calculate total count
    const totalCount = Object.values(deviceCounts).reduce((total, count) => total + count, 0);

    // Create the donut chart
    Highcharts.chart('container', {
        chart: {
            type: 'pie'
        },
        title: {
            text: 'Active User by Device'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.y}</b>'
        },
        plotOptions: {
            pie: {
                innerSize: '80%', // Specify inner size to create a donut chart
                depth: 50 // Add a 3D effect to the chart
            }
        },
        series: [{
            name: 'Count',
            data: donutData
        }]
    });

    // Display total count
    document.getElementById('total-count').innerText = 'Total Count: ' + totalCount;
})();





// Check if device type cookie exists, if not, detect device type and set the cookie
if (!getCookie('deviceType')) {
    var deviceType = detectDeviceType();
    setCookie('deviceType', deviceType, 365); 
}

// Function to detect the type of device based on user agent
function detectDeviceType() {
    var userAgent = navigator.userAgent;
   
    if (/tablet|ipad|playbook|silk|(android(?!.*mobile))/i.test(userAgent)) {
        return 'tablet';
    } else if (/mobile|iphone|ipod|blackberry|opera mini|iemobile|windows phone|trident|opera mobi|mobilesafari|htc|nokia|sony|symbian|samsung|lg|htc|mot|mot\-/i.test(userAgent)) {
        return 'mobile';
    } else {
        return 'pc';
    }
}

// Function to set a cookie with a specified expiration time
function setCookie(cookieName, cookieValue, expirationDays) {
    const expirationDate = new Date();
    expirationDate.setTime(expirationDate.getTime() + expirationDays * 24 * 60 * 60 * 1000);
    var expires = "expires=" + expirationDate.toUTCString();
    document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
}

// Function to get the value of a cookie by its name
function getCookie(cookieName) {
    var name = cookieName + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var cookieArray = decodedCookie.split(";");
    for (var i = 0; i < cookieArray.length; i++) {
        var cookie = cookieArray[i];
        while (cookie.charAt(0) == " ") {
            cookie = cookie.substring(1);
        }
        if (cookie.indexOf(name) == 0) {
            return cookie.substring(name.length, cookie.length);
        }
    }
    return "";
}


var deviceType = getCookie("deviceType");
console.log("Device Type:", deviceType);




renderDonutChart

 renderDonutChart() {
    this.dataService.getUsersData().subscribe(data => {
      const deviceCounts: { [key: string]: number } = data.reduce((counts, entry) => {
        if (entry.userInfo && entry.userInfo.deviceType) {
          counts[entry.userInfo.deviceType] = (counts[entry.userInfo.deviceType] || 0) + 1;
        } else {
          console.warn('Invalid entry:', entry);
        }
        return counts;
      }, {});
  
      const donutData = Object.entries(deviceCounts).map(([deviceType, count]: [string, number]) => ({
        name: deviceType,
        y: count,
      }));
  
      this.totalCount = Object.values(deviceCounts).reduce((total, count) => total + count, 0);
  
      Highcharts.chart('pieChartContainer', {
        chart: {
          type: 'pie'
        },
        title: {
          text: 'Active User by Device',
        },
        tooltip: {
          pointFormat: '{series.name}: <b>{point.y}</b>'
        },
        plotOptions: {
          pie: {
            innerSize: '80%',
            depth: 10
          }
        },
        series: [{
          type: 'pie',
          name: 'Count',
          data: donutData.map(item => [item.name, item.y]) // Convert data to the format expected by Highcharts
        }]
      });
  
      document.getElementById('total-count').innerText = 'Total Count: ' + this.totalCount;
    });
  }